#!/bin/bash

if [ ! -d /out ]; then
    echo "The /out directory has not been mapped"
    exit 1
fi

if [ "${1:---help}" == "--help" ]; then
    shift
    cat <<'EOF'
usage: package [--accept-external-binaries] ORG [all [STACK] | LANGUAGE [TAG] [STACK]]

ORG is the github organization hosting the buildpack repos, i.e.
"cloudfoundry" or "SUSE".

You cannot specify a TAG when using language "all" because the tag would be different
for each language.

Note that TAG is not optional if you want to specify STACK (but you can still use ""
to specify the latest release).

It is not possible to specify more than one stack.
EOF
    exit
fi

if [ "${1:-}" == "--accept-external-binaries" ]; then
    shift
else
    cat <<'EOF'

Some Cloud Foundry buildpacks can reference binaries with proprietary or
mutually incompatible open source licenses which cannot be distributed
together as offline/cached buildpack archives. Operators who wish
to package and maintain offline buildpacks will be responsible for any
required licensing or export compliance obligations.

For automation purposes you can use the --accept-external-binaries commandline
option to accept this disclaimer without the interactive prompt.

Do you agree to the disclaimer?
EOF
    select answer in Yes No; do
        case ${answer} in
            Yes ) break;;
            No  ) exit;;
        esac
    done
fi

function install_buildpack_packager() {

  # Assuming we are in the BUILDPACK directory

  PACKAGER_DIR=$1
  if [[ -d $PACKAGER_DIR ]]; then
    (cd ${PACKAGER_DIR} && go install)
    echo ${PACKAGER_DIR}/main.go
  elif [[ -e go.mod ]]; then
    PACKAGER=buildpack-packager.go
    curl https://raw.githubusercontent.com/cloudfoundry/libbuildpack/master/packager/buildpack-packager/main.go \
         --silent --output $PACKAGER
    go install $PACKAGER
    echo $PACKAGER
  else
    (>&2 echo "buildpack-packager missing")
    exit 1
  fi
}

function package() {
    ORG=$1
    LANGUAGE=$2
    VERSION=$3
    STACK=$4

    BUILDPACK=${LANGUAGE}-buildpack
    if [ "${ORG}" == "SUSE" ]; then
        BUILDPACK=cf-${BUILDPACK}
    fi
    VENDOR_DIR=/${BUILDPACK}/src/${LANGUAGE}/vendor
    PACKAGER_DIR=${VENDOR_DIR}/github.com/cloudfoundry/libbuildpack/packager/buildpack-packager
    URL=https://github.com/${ORG}/${BUILDPACK}

    if ! curl --head --silent --fail --output /dev/null ${URL}; then
        echo "Can't fetch buildpack from ${URL}"
        exit 1
    fi

    cd ${HOME}
    set -ex

    if [ -z "${VERSION}" ]; then
        VERSION=$(curl -s https://api.github.com/repos/${ORG}/${BUILDPACK}/releases/latest | jq -r .tag_name)
    fi

    git clone --recursive ${URL} /${BUILDPACK}
    cd /${BUILDPACK}
    git checkout ${VERSION}
    git submodule update --init --recursive

    if [ -f cf.Gemfile ]; then
        BUNDLE_GEMFILE=cf.Gemfile bundle config build.nokogiri --use-system-libraries
        BUNDLE_GEMFILE=cf.Gemfile bundle
        if BUNDLE_GEMFILE=cf.Gemfile bundle exec buildpack-packager --help | grep -q any-stack; then
            if [ -z ${STACK} ]; then
                BUNDLE_GEMFILE=cf.Gemfile bundle exec buildpack-packager --cached --any-stack
            else
                BUNDLE_GEMFILE=cf.Gemfile bundle exec buildpack-packager --cached --stack ${STACK}
            fi
        else
            BUNDLE_GEMFILE=cf.Gemfile bundle exec buildpack-packager --cached
        fi
    elif [[ -f Gemfile && -f Rakefile ]]; then
        bundle
        bundle exec rake clean package OFFLINE=true PINNED=true
        cd build
    elif [[ -f .envrc ]] && [[ -d ${PACKAGER_DIR} || -f go.mod ]]; then
        source .envrc
        MAIN_GO=$(install_buildpack_packager ${PACKAGER_DIR})
        if grep -q github.com/google/subcommands ${MAIN_GO}; then
            if grep -q any-stack ${MAIN_GO}; then
                if [ -z ${STACK} ]; then
                    buildpack-packager build --any-stack --cached=true
                else
                    buildpack-packager build --stack ${STACK} --cached=true
                fi
            else
                buildpack-packager build --cached=true
            fi
        else
            buildpack-packager --cached
        fi
    else
        echo "Don't know how to build the ${ORG}/${BUILDPACK}"
        exit 1
    fi

    mv *.zip /out/
    set +ex
}

org=$1
shift
if [ "${org}" == "suse" ]; then
    org=SUSE
fi

if [ "${1:-}" == "all" ]; then
    for language in binary dotnet-core go java nodejs php python ruby staticfile; do
        # skipping dotnet-core for now because it has no SUSE assets yet
        if [[ "${org}" == "SUSE" && "${language}" == "dotnet-core" ]]; then
            continue
        fi
        package "${org}" "${language}" "" "$@"
    done
else
    package "${org}" "$@"
fi

cd /out
ls -l *.zip
