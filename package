#!/bin/bash

if [ ! -d /out ]; then
    echo "The /out directory has not been mapped"
    exit 1
fi

if [ "${1:---help}" == "--help" ]; then
    shift
    cat <<'EOF'
usage: package [--accept-external-binaries] ORG [all | LANGUAGE [TAG]]

ORG is the github organization hosting the buildpack repos, i.e.
"cloudfoundry" or "SUSE".
EOF
    exit
fi

if [ "${1:-}" == "--accept-external-binaries" ]; then
    shift
else
    cat <<'EOF'

Some Cloud Foundry buildpacks can reference binaries with proprietary or
mutually incompatible open source licenses which cannot be distributed
together as offline/cached buildpack archives. Operators who wish
to package and maintain offline buildpacks will be responsible for any
required licensing or export compliance obligations.

For automation purposes you can use the --accept-external-binaries commandline
option to accept this disclaimer without the interactive prompt.

Do you agree to the disclaimer?
EOF
    select answer in Yes No; do
        case ${answer} in
            Yes ) break;;
            No  ) exit;;
        esac
    done
fi

function package() {
    ORG=$1
    LANGUAGE=$2
    VERSION=$3
    BUILDPACK=cf-${LANGUAGE}-buildpack
    VENDOR_DIR=/${BUILDPACK}/src/${LANGUAGE}/vendor
    PACKAGER_DIR=${VENDOR_DIR}/github.com/cloudfoundry/libbuildpack/packager/buildpack-packager
    URL=https://github.com/${ORG}/${BUILDPACK}

    if ! curl --head --silent --fail --output /dev/null ${URL}; then
        echo "Can't fetch buildpack from ${URL}"
        exit 1
    fi

    cd ${HOME}
    set -ex

    git clone --recursive ${URL} /${BUILDPACK}
    cd /${BUILDPACK}
    if [ -n "${VERSION}" ]; then
        git checkout ${VERSION}
        git submodule update --init --recursive
    fi

    if [ -f cf.Gemfile ]; then
        BUNDLE_GEMFILE=cf.Gemfile bundle.ruby2.3 config build.nokogiri --use-system-libraries
        BUNDLE_GEMFILE=cf.Gemfile bundle.ruby2.3
        BUNDLE_GEMFILE=cf.Gemfile bundle.ruby2.3 exec buildpack-packager --cached
    elif [[ -f Gemfile && -f Rakefile ]]; then
        bundle.ruby2.3
        bundle.ruby2.3 exec rake clean package OFFLINE=true PINNED=true
        cd build
    elif [[ -f .envrc && -d ${PACKAGER_DIR} ]]; then
        source .envrc
        (cd ${PACKAGER_DIR} && go install)
        if [ -d ${VENDOR_DIR}/github.com/google/subcommands ]; then
            buildpack-packager build --cached=true
        else
            buildpack-packager --cached
        fi
    else
        echo "Don't know how to build the ${ORG}/${BUILDPACK}"
        exit 1
    fi

    mv *.zip /out/
    set +ex
}

org=$1
shift
if [ "${org}" == "suse" ]; then
    org=SUSE
fi

if [ "${1:-}" == "all" ]; then
    for language in binary dotnet-core go java nodejs php python ruby staticfile; do
        # skipping dotnet-core for now because it has no SUSE assets yet
        if [[ "${org}" == "SUSE" && "${language}" == "dotnet-core" ]]; then
            continue
        fi
        package ${org} ${language}
    done
else
    package $org $@
fi

cd /out
ls -l *.zip
